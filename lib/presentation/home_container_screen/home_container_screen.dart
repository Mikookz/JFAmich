import 'bloc/home_container_bloc.dart';import 'models/home_container_model.dart';import 'package:flutter/material.dart';import 'package:zonar_marketing__grapichs/core/app_export.dart';import 'package:zonar_marketing__grapichs/presentation/downloaded_tab_container_page/downloaded_tab_container_page.dart';import 'package:zonar_marketing__grapichs/presentation/home_page/home_page.dart';import 'package:zonar_marketing__grapichs/presentation/profile_page/profile_page.dart';import 'package:zonar_marketing__grapichs/presentation/saved_page/saved_page.dart';import 'package:zonar_marketing__grapichs/presentation/search_page/search_page.dart';import 'package:zonar_marketing__grapichs/widgets/custom_bottom_bar.dart';
// ignore_for_file: must_be_immutable
class HomeContainerScreen extends StatelessWidget {GlobalKey<NavigatorState> navigatorKey = GlobalKey();

static Widget builder(BuildContext context) { var arg = ModalRoute.of(context)?.settings.arguments as Map<String, dynamic>; return BlocProvider<HomeContainerBloc>(create: (context) => HomeContainerBloc(HomeContainerState(homeContainerModelObj: HomeContainerModel(), id: arg[NavigationArgs.id]))..add(HomeContainerInitialEvent()), child: HomeContainerScreen()); } 
@override Widget build(BuildContext context) { return BlocBuilder<HomeContainerBloc, HomeContainerState>(builder: (context, state) {return SafeArea(child: Scaffold(backgroundColor: ColorConstant.black900, body: Navigator(key: navigatorKey, initialRoute: AppRoutes.homePage, onGenerateRoute: (routeSetting) => PageRouteBuilder(pageBuilder: (ctx, ani, ani1) => getCurrentPage(context, routeSetting.name!), transitionDuration: Duration(seconds: 0))), bottomNavigationBar: CustomBottomBar(onChanged: (BottomBarEnum type) {Navigator.pushNamed(navigatorKey.currentContext!, getCurrentRoute(type));})));}); } 
///Handling route based on bottom click actions
String getCurrentRoute(BottomBarEnum type) { switch (type) {case BottomBarEnum.Home: return AppRoutes.homePage; case BottomBarEnum.Search: return AppRoutes.searchPage; case BottomBarEnum.Saved: return AppRoutes.savedPage; case BottomBarEnum.Downloads: return AppRoutes.downloadedTabContainerPage; case BottomBarEnum.Me: return AppRoutes.profilePage; default: return "/";} } 
///Handling page based on route
Widget getCurrentPage(BuildContext context, String currentRoute, ) { switch (currentRoute) {case AppRoutes.homePage: return HomePage.builder(context); case AppRoutes.searchPage: return SearchPage.builder(context); case AppRoutes.savedPage: return SavedPage.builder(context); case AppRoutes.downloadedTabContainerPage: return DownloadedTabContainerPage.builder(context); case AppRoutes.profilePage: return ProfilePage.builder(context); default: return DefaultWidget();} } 
 }
